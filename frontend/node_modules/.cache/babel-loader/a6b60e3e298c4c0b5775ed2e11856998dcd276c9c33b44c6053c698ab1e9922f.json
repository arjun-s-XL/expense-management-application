{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { loginApi, updatePlanApi } from '../services/api';\n\n// Create an async thunk for the login operation\nexport const loginAsync = createAsyncThunk('auth/login', async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const userData = await loginApi(email, password);\n    return userData;\n  } catch (error) {\n    // Return an error with rejectWithValue\n    return rejectWithValue(error.response.data);\n  }\n});\n\n// Create an async thunk for updating the user's plan\nexport const updatePlanAsync = createAsyncThunk('auth/updatePlan', async ({\n  email,\n  planId\n}) => {\n  try {\n    const updatedPlan = await updatePlanApi(email, planId);\n    return updatedPlan;\n  } catch (error) {\n    // Handle errors as needed\n    throw error;\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    isAuthenticated: false,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.isAuthenticated = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loginAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.isAuthenticated = true;\n      state.user = action.payload;\n    }).addCase(loginAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload; // Error details returned by rejectWithValue\n    }).addCase(updatePlanAsync.fulfilled, (state, action) => {\n      // Update the user's plan in the Redux store\n      state.user = action.payload;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","loginApi","updatePlanApi","loginAsync","email","password","rejectWithValue","userData","error","response","data","updatePlanAsync","planId","updatedPlan","authSlice","name","initialState","user","isAuthenticated","loading","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/home/devops/expense-management-application/frontend/src/actions/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { loginApi, updatePlanApi } from '../services/api';\n\n// Create an async thunk for the login operation\nexport const loginAsync = createAsyncThunk('auth/login', async ({ email, password }, { rejectWithValue }) => {\n  try {\n    const userData = await loginApi(email, password);\n    return userData;\n  } catch (error) {\n    // Return an error with rejectWithValue\n    return rejectWithValue(error.response.data);\n  }\n});\n\n// Create an async thunk for updating the user's plan\nexport const updatePlanAsync = createAsyncThunk('auth/updatePlan', async ({ email, planId }) => {\n  try {\n    const updatedPlan = await updatePlanApi(email, planId);\n    return updatedPlan;\n  } catch (error) {\n    // Handle errors as needed\n    throw error;\n  }\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    isAuthenticated: false,\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    logout: (state) => {\n      state.user = null;\n      state.isAuthenticated = false;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginAsync.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(loginAsync.fulfilled, (state, action) => {\n        state.loading = false;\n        state.isAuthenticated = true;\n        state.user = action.payload;\n      })\n      .addCase(loginAsync.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload; // Error details returned by rejectWithValue\n      })\n      .addCase(updatePlanAsync.fulfilled, (state, action) => {\n        // Update the user's plan in the Redux store\n        state.user = action.payload;\n      });\n  },\n});\n\nexport const { logout } = authSlice.actions;\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,EAAEC,aAAa,QAAQ,iBAAiB;;AAEzD;AACA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,YAAY,EAAE,OAAO;EAAEI,KAAK;EAAEC;AAAS,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC3G,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACG,KAAK,EAAEC,QAAQ,CAAC;IAChD,OAAOE,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAOF,eAAe,CAACE,KAAK,CAACC,QAAQ,CAACC,IAAI,CAAC;EAC7C;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,eAAe,GAAGX,gBAAgB,CAAC,iBAAiB,EAAE,OAAO;EAAEI,KAAK;EAAEQ;AAAO,CAAC,KAAK;EAC9F,IAAI;IACF,MAAMC,WAAW,GAAG,MAAMX,aAAa,CAACE,KAAK,EAAEQ,MAAM,CAAC;IACtD,OAAOC,WAAW;EACpB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd;IACA,MAAMA,KAAK;EACb;AACF,CAAC,CAAC;AAEF,MAAMM,SAAS,GAAGf,WAAW,CAAC;EAC5BgB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IACVC,eAAe,EAAE,KAAK;IACtBC,OAAO,EAAE,KAAK;IACdX,KAAK,EAAE;EACT,CAAC;EACDY,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACL,IAAI,GAAG,IAAI;MACjBK,KAAK,CAACJ,eAAe,GAAG,KAAK;IAC/B;EACF,CAAC;EACDK,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACtB,UAAU,CAACuB,OAAO,EAAGJ,KAAK,IAAK;MACtCA,KAAK,CAACH,OAAO,GAAG,IAAI;MACpBG,KAAK,CAACd,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDiB,OAAO,CAACtB,UAAU,CAACwB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAChDN,KAAK,CAACH,OAAO,GAAG,KAAK;MACrBG,KAAK,CAACJ,eAAe,GAAG,IAAI;MAC5BI,KAAK,CAACL,IAAI,GAAGW,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAACtB,UAAU,CAAC2B,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC/CN,KAAK,CAACH,OAAO,GAAG,KAAK;MACrBG,KAAK,CAACd,KAAK,GAAGoB,MAAM,CAACC,OAAO,CAAC,CAAC;IAChC,CAAC,CAAC,CACDJ,OAAO,CAACd,eAAe,CAACgB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACrD;MACAN,KAAK,CAACL,IAAI,GAAGW,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAO,CAAC,GAAGP,SAAS,CAACiB,OAAO;AAC3C,eAAejB,SAAS,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}